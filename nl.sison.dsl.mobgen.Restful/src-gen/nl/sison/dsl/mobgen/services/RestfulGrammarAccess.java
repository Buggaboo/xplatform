/*
* generated by Xtext
*/
package nl.sison.dsl.mobgen.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RestfulGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MobgenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mobgen");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cResourcesAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cResourcesMobgenResourceDefinitionParserRuleCall_0_0 = (RuleCall)cResourcesAssignment_0.eContents().get(0);
		private final Assignment cCallsAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCallsMobgenCallDefinitionParserRuleCall_1_0 = (RuleCall)cCallsAssignment_1.eContents().get(0);
		
		/// *
		// * 
		// * Handy links:
		// * * http://pettergraff.blogspot.nl/2009/12/deploying-code-generator-with.html
		// * * http://charandeepmatta.com/2012/09/01/how-to-generate-eclipse-plugin-for-your-dsl-written-in-xtext/ - sharing your plugin
		// * * http://www.techjava.de/topics/2010/06/extending-xtext-build-participants/ - using "Nature" to distinguish DSLs
		// * * http://stackoverflow.com/questions/10917386/linking-xtext-with-stringtemplate-code-generator - run the generator from Main.java
		// * * http://wiki.eclipse.org/Xtext/FAQ#How_do_I_load_my_model_in_a_standalone_Java_application.C2.A0.3F - run xtend generation as standalone, e.g. from main method
		// * * http://davehofmann.de/blog/?p=101 // - standalone way of setting up the generator
		// * * http://koehnlein.blogspot.de/2012/11/xtext-tip-how-do-i-get-guice-injector.html - Guice and standalone dependency injection
		// * * http://christiandietrich.wordpress.com/2011/10/15/xtext-calling-the-generator-from-a-context-menu/ - Running "Generate code" from the context menu
		// * 
		// * IDEA name for the project, plate smasher (boilerplate smasher)
		// * IDEA feed vector graphics, generate assets l, m, h, xh, xxh, xxxh, pixel dimensions
		// * 
		// * -JS (06-Mar-2014)
		// * 
		// * / / **
		// * 
		// * Mobgen http call generator parser
		// * 
		// * / Mobgen:
		//	(resources+=MobgenResourceDefinition | calls+=MobgenCallDefinition)*;
		public ParserRule getRule() { return rule; }

		//(resources+=MobgenResourceDefinition | calls+=MobgenCallDefinition)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//resources+=MobgenResourceDefinition
		public Assignment getResourcesAssignment_0() { return cResourcesAssignment_0; }

		//MobgenResourceDefinition
		public RuleCall getResourcesMobgenResourceDefinitionParserRuleCall_0_0() { return cResourcesMobgenResourceDefinitionParserRuleCall_0_0; }

		//calls+=MobgenCallDefinition
		public Assignment getCallsAssignment_1() { return cCallsAssignment_1; }

		//MobgenCallDefinition
		public RuleCall getCallsMobgenCallDefinitionParserRuleCall_1_0() { return cCallsMobgenCallDefinitionParserRuleCall_1_0; }
	}

	public class MobgenCallDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenCallDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMethodAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMethodRestfulMethodsEnumRuleCall_3_0 = (RuleCall)cMethodAssignment_3.eContents().get(0);
		private final Keyword cFromKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUriAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUriURIParserRuleCall_5_0 = (RuleCall)cUriAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cHeadersKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Keyword cFromKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Keyword cRequestKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cRequestHeadersAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cRequestHeadersMobgenHeaderParserRuleCall_6_4_0 = (RuleCall)cRequestHeadersAssignment_6_4.eContents().get(0);
		private final Group cGroup_6_5 = (Group)cGroup_6.eContents().get(5);
		private final Keyword cAndKeyword_6_5_0 = (Keyword)cGroup_6_5.eContents().get(0);
		private final Keyword cResponseKeyword_6_5_1 = (Keyword)cGroup_6_5.eContents().get(1);
		private final Assignment cResponseHeadersAssignment_6_5_2 = (Assignment)cGroup_6_5.eContents().get(2);
		private final RuleCall cResponseHeadersMobgenHeaderParserRuleCall_6_5_2_0 = (RuleCall)cResponseHeadersAssignment_6_5_2.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cClientKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cExpectsKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cJsonToClientAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cJsonToClientMobgenJsonParserRuleCall_7_2_0 = (RuleCall)cJsonToClientAssignment_7_2.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cServerKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cExpectsKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cJsonToServerAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cJsonToServerMobgenJsonParserRuleCall_8_2_0 = (RuleCall)cJsonToServerAssignment_8_2.eContents().get(0);
		
		/// **
		// * Only POST / PUT request method can do a 'server' 'expects' 
		// * / MobgenCallDefinition:
		//	"call" name=ID ":" method=RestfulMethods "from" uri=URI ("with" "headers" "from" "request" requestHeaders=MobgenHeader
		//	("and" "response" responseHeaders=MobgenHeader)?)? ("client" "expects" jsonToClient=MobgenJson)? ("server" "expects"
		//	jsonToServer=MobgenJson)?;
		public ParserRule getRule() { return rule; }

		//"call" name=ID ":" method=RestfulMethods "from" uri=URI ("with" "headers" "from" "request" requestHeaders=MobgenHeader
		//("and" "response" responseHeaders=MobgenHeader)?)? ("client" "expects" jsonToClient=MobgenJson)? ("server" "expects"
		//jsonToServer=MobgenJson)?
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//method=RestfulMethods
		public Assignment getMethodAssignment_3() { return cMethodAssignment_3; }

		//RestfulMethods
		public RuleCall getMethodRestfulMethodsEnumRuleCall_3_0() { return cMethodRestfulMethodsEnumRuleCall_3_0; }

		//"from"
		public Keyword getFromKeyword_4() { return cFromKeyword_4; }

		//uri=URI
		public Assignment getUriAssignment_5() { return cUriAssignment_5; }

		//URI
		public RuleCall getUriURIParserRuleCall_5_0() { return cUriURIParserRuleCall_5_0; }

		//("with" "headers" "from" "request" requestHeaders=MobgenHeader ("and" "response" responseHeaders=MobgenHeader)?)?
		public Group getGroup_6() { return cGroup_6; }

		//"with"
		public Keyword getWithKeyword_6_0() { return cWithKeyword_6_0; }

		//"headers"
		public Keyword getHeadersKeyword_6_1() { return cHeadersKeyword_6_1; }

		//"from"
		public Keyword getFromKeyword_6_2() { return cFromKeyword_6_2; }

		//"request"
		public Keyword getRequestKeyword_6_3() { return cRequestKeyword_6_3; }

		//requestHeaders=MobgenHeader
		public Assignment getRequestHeadersAssignment_6_4() { return cRequestHeadersAssignment_6_4; }

		//MobgenHeader
		public RuleCall getRequestHeadersMobgenHeaderParserRuleCall_6_4_0() { return cRequestHeadersMobgenHeaderParserRuleCall_6_4_0; }

		//("and" "response" responseHeaders=MobgenHeader)?
		public Group getGroup_6_5() { return cGroup_6_5; }

		//"and"
		public Keyword getAndKeyword_6_5_0() { return cAndKeyword_6_5_0; }

		//"response"
		public Keyword getResponseKeyword_6_5_1() { return cResponseKeyword_6_5_1; }

		//responseHeaders=MobgenHeader
		public Assignment getResponseHeadersAssignment_6_5_2() { return cResponseHeadersAssignment_6_5_2; }

		//MobgenHeader
		public RuleCall getResponseHeadersMobgenHeaderParserRuleCall_6_5_2_0() { return cResponseHeadersMobgenHeaderParserRuleCall_6_5_2_0; }

		//("client" "expects" jsonToClient=MobgenJson)?
		public Group getGroup_7() { return cGroup_7; }

		//"client"
		public Keyword getClientKeyword_7_0() { return cClientKeyword_7_0; }

		//"expects"
		public Keyword getExpectsKeyword_7_1() { return cExpectsKeyword_7_1; }

		//jsonToClient=MobgenJson
		public Assignment getJsonToClientAssignment_7_2() { return cJsonToClientAssignment_7_2; }

		//MobgenJson
		public RuleCall getJsonToClientMobgenJsonParserRuleCall_7_2_0() { return cJsonToClientMobgenJsonParserRuleCall_7_2_0; }

		//("server" "expects" jsonToServer=MobgenJson)?
		public Group getGroup_8() { return cGroup_8; }

		//"server"
		public Keyword getServerKeyword_8_0() { return cServerKeyword_8_0; }

		//"expects"
		public Keyword getExpectsKeyword_8_1() { return cExpectsKeyword_8_1; }

		//jsonToServer=MobgenJson
		public Assignment getJsonToServerAssignment_8_2() { return cJsonToServerAssignment_8_2; }

		//MobgenJson
		public RuleCall getJsonToServerMobgenJsonParserRuleCall_8_2_0() { return cJsonToServerMobgenJsonParserRuleCall_8_2_0; }
	}

	public class MobgenHeaderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenHeader");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cHeaderKeyValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_3_0 = (RuleCall)cHeaderKeyValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cHeaderKeyValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_4_1_0 = (RuleCall)cHeaderKeyValuesAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cApostropheApostropheApostropheKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//MobgenHeader:
		//	name=ID "\'\'\'" "{" headerKeyValues+=MobgenHeaderKeyValuePair ("," headerKeyValues+=MobgenHeaderKeyValuePair)* ","?
		//	"}" "\'\'\'";
		public ParserRule getRule() { return rule; }

		//name=ID "\'\'\'" "{" headerKeyValues+=MobgenHeaderKeyValuePair ("," headerKeyValues+=MobgenHeaderKeyValuePair)* ","? "}"
		//"\'\'\'"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_1() { return cApostropheApostropheApostropheKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//headerKeyValues+=MobgenHeaderKeyValuePair
		public Assignment getHeaderKeyValuesAssignment_3() { return cHeaderKeyValuesAssignment_3; }

		//MobgenHeaderKeyValuePair
		public RuleCall getHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_3_0() { return cHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_3_0; }

		//("," headerKeyValues+=MobgenHeaderKeyValuePair)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//headerKeyValues+=MobgenHeaderKeyValuePair
		public Assignment getHeaderKeyValuesAssignment_4_1() { return cHeaderKeyValuesAssignment_4_1; }

		//MobgenHeaderKeyValuePair
		public RuleCall getHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_4_1_0() { return cHeaderKeyValuesMobgenHeaderKeyValuePairParserRuleCall_4_1_0; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_7() { return cApostropheApostropheApostropheKeyword_7; }
	}

	public class MobgenHeaderKeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenHeaderKeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cParameterAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cParameterMobgenHeaderParameterParserRuleCall_2_1_0 = (RuleCall)cParameterAssignment_2_1.eContents().get(0);
		
		//MobgenHeaderKeyValuePair:
		//	key=STRING "=" (value=STRING | parameter=MobgenHeaderParameter);
		public ParserRule getRule() { return rule; }

		//key=STRING "=" (value=STRING | parameter=MobgenHeaderParameter)
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING | parameter=MobgenHeaderParameter
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }

		//parameter=MobgenHeaderParameter
		public Assignment getParameterAssignment_2_1() { return cParameterAssignment_2_1; }

		//MobgenHeaderParameter
		public RuleCall getParameterMobgenHeaderParameterParserRuleCall_2_1_0() { return cParameterMobgenHeaderParameterParserRuleCall_2_1_0; }
	}

	public class MobgenHeaderParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenHeaderParameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//MobgenHeaderParameter:
		//	"{" id=ID "}";
		public ParserRule getRule() { return rule; }

		//"{" id=ID "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class MobgenJsonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenJson");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJsonObjectValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cApostropheApostropheApostropheKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MobgenJson:
		//	name=ID "\'\'\'" value=JsonObjectValue "\'\'\'";
		public ParserRule getRule() { return rule; }

		//name=ID "\'\'\'" value=JsonObjectValue "\'\'\'"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_1() { return cApostropheApostropheApostropheKeyword_1; }

		//value=JsonObjectValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//JsonObjectValue
		public RuleCall getValueJsonObjectValueParserRuleCall_2_0() { return cValueJsonObjectValueParserRuleCall_2_0; }

		//"\'\'\'"
		public Keyword getApostropheApostropheApostropheKeyword_3() { return cApostropheApostropheApostropheKeyword_3; }
	}

	public class JsonObjectValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObjectValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cScalarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cScalarJsonLiteralValueParserRuleCall_0_0 = (RuleCall)cScalarAssignment_0.eContents().get(0);
		private final Assignment cCompositeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cCompositeJsonCompositeValueParserRuleCall_1_0 = (RuleCall)cCompositeAssignment_1.eContents().get(0);
		
		/// **
		// *  Borrowed from http://www.ebpml.org/blog2/index.php/2010/11/05/mde-xtext-and-json
		// * / JsonObjectValue:
		//	scalar=JsonLiteralValue | composite=JsonCompositeValue;
		public ParserRule getRule() { return rule; }

		//scalar=JsonLiteralValue | composite=JsonCompositeValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//scalar=JsonLiteralValue
		public Assignment getScalarAssignment_0() { return cScalarAssignment_0; }

		//JsonLiteralValue
		public RuleCall getScalarJsonLiteralValueParserRuleCall_0_0() { return cScalarJsonLiteralValueParserRuleCall_0_0; }

		//composite=JsonCompositeValue
		public Assignment getCompositeAssignment_1() { return cCompositeAssignment_1; }

		//JsonCompositeValue
		public RuleCall getCompositeJsonCompositeValueParserRuleCall_1_0() { return cCompositeJsonCompositeValueParserRuleCall_1_0; }
	}

	public class JsonCompositeValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonCompositeValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjectValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObjectValueJsonObjectParserRuleCall_0_0 = (RuleCall)cObjectValueAssignment_0.eContents().get(0);
		private final Assignment cArrayValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cArrayValueJsonArrayParserRuleCall_1_0 = (RuleCall)cArrayValueAssignment_1.eContents().get(0);
		
		//JsonCompositeValue:
		//	objectValue=JsonObject | arrayValue=JsonArray;
		public ParserRule getRule() { return rule; }

		//objectValue=JsonObject | arrayValue=JsonArray
		public Alternatives getAlternatives() { return cAlternatives; }

		//objectValue=JsonObject
		public Assignment getObjectValueAssignment_0() { return cObjectValueAssignment_0; }

		//JsonObject
		public RuleCall getObjectValueJsonObjectParserRuleCall_0_0() { return cObjectValueJsonObjectParserRuleCall_0_0; }

		//arrayValue=JsonArray
		public Assignment getArrayValueAssignment_1() { return cArrayValueAssignment_1; }

		//JsonArray
		public RuleCall getArrayValueJsonArrayParserRuleCall_1_0() { return cArrayValueJsonArrayParserRuleCall_1_0; }
	}

	public class JsonLiteralValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonLiteralValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralStringAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralStringSTRINGTerminalRuleCall_0_0 = (RuleCall)cLiteralStringAssignment_0.eContents().get(0);
		private final Assignment cEmptyObjectAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cEmptyObjectEMPTY_JSON_OBJECTTerminalRuleCall_1_0 = (RuleCall)cEmptyObjectAssignment_1.eContents().get(0);
		private final Assignment cEmptyArrayAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cEmptyArrayEMPTY_JSON_ARRAYTerminalRuleCall_2_0 = (RuleCall)cEmptyArrayAssignment_2.eContents().get(0);
		private final Assignment cLiteralNullAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cLiteralNullJSON_LITERAL_NULLTerminalRuleCall_3_0 = (RuleCall)cLiteralNullAssignment_3.eContents().get(0);
		private final Assignment cNumberFloatAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNumberFloatJSON_NUMBER_FLOATTerminalRuleCall_4_0 = (RuleCall)cNumberFloatAssignment_4.eContents().get(0);
		private final Assignment cNumberIntegerAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNumberIntegerINTTerminalRuleCall_5_0 = (RuleCall)cNumberIntegerAssignment_5.eContents().get(0);
		private final Assignment cEnumTypeAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cEnumTypeJsonEnumTypeParserRuleCall_6_0 = (RuleCall)cEnumTypeAssignment_6.eContents().get(0);
		private final Assignment cBooleanValueAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cBooleanValueJsonLiteralBooleanEnumRuleCall_7_0 = (RuleCall)cBooleanValueAssignment_7.eContents().get(0);
		private final Assignment cMetaScalarValueAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cMetaScalarValueJsonMetaScalarTypeEnumRuleCall_8_0 = (RuleCall)cMetaScalarValueAssignment_8.eContents().get(0);
		
		//JsonLiteralValue:
		//	literalString?=STRING | emptyObject?=EMPTY_JSON_OBJECT | emptyArray?=EMPTY_JSON_ARRAY | literalNull?=JSON_LITERAL_NULL
		//	| numberFloat?=JSON_NUMBER_FLOAT | numberInteger?=INT | enumType?=JsonEnumType | booleanValue=JsonLiteralBoolean |
		//	metaScalarValue=JsonMetaScalarType;
		public ParserRule getRule() { return rule; }

		//literalString?=STRING | emptyObject?=EMPTY_JSON_OBJECT | emptyArray?=EMPTY_JSON_ARRAY | literalNull?=JSON_LITERAL_NULL |
		//numberFloat?=JSON_NUMBER_FLOAT | numberInteger?=INT | enumType?=JsonEnumType | booleanValue=JsonLiteralBoolean |
		//metaScalarValue=JsonMetaScalarType
		public Alternatives getAlternatives() { return cAlternatives; }

		//literalString?=STRING
		public Assignment getLiteralStringAssignment_0() { return cLiteralStringAssignment_0; }

		//STRING
		public RuleCall getLiteralStringSTRINGTerminalRuleCall_0_0() { return cLiteralStringSTRINGTerminalRuleCall_0_0; }

		//emptyObject?=EMPTY_JSON_OBJECT
		public Assignment getEmptyObjectAssignment_1() { return cEmptyObjectAssignment_1; }

		//EMPTY_JSON_OBJECT
		public RuleCall getEmptyObjectEMPTY_JSON_OBJECTTerminalRuleCall_1_0() { return cEmptyObjectEMPTY_JSON_OBJECTTerminalRuleCall_1_0; }

		//emptyArray?=EMPTY_JSON_ARRAY
		public Assignment getEmptyArrayAssignment_2() { return cEmptyArrayAssignment_2; }

		//EMPTY_JSON_ARRAY
		public RuleCall getEmptyArrayEMPTY_JSON_ARRAYTerminalRuleCall_2_0() { return cEmptyArrayEMPTY_JSON_ARRAYTerminalRuleCall_2_0; }

		//literalNull?=JSON_LITERAL_NULL
		public Assignment getLiteralNullAssignment_3() { return cLiteralNullAssignment_3; }

		//JSON_LITERAL_NULL
		public RuleCall getLiteralNullJSON_LITERAL_NULLTerminalRuleCall_3_0() { return cLiteralNullJSON_LITERAL_NULLTerminalRuleCall_3_0; }

		//numberFloat?=JSON_NUMBER_FLOAT
		public Assignment getNumberFloatAssignment_4() { return cNumberFloatAssignment_4; }

		//JSON_NUMBER_FLOAT
		public RuleCall getNumberFloatJSON_NUMBER_FLOATTerminalRuleCall_4_0() { return cNumberFloatJSON_NUMBER_FLOATTerminalRuleCall_4_0; }

		//numberInteger?=INT
		public Assignment getNumberIntegerAssignment_5() { return cNumberIntegerAssignment_5; }

		//INT
		public RuleCall getNumberIntegerINTTerminalRuleCall_5_0() { return cNumberIntegerINTTerminalRuleCall_5_0; }

		//enumType?=JsonEnumType
		public Assignment getEnumTypeAssignment_6() { return cEnumTypeAssignment_6; }

		//JsonEnumType
		public RuleCall getEnumTypeJsonEnumTypeParserRuleCall_6_0() { return cEnumTypeJsonEnumTypeParserRuleCall_6_0; }

		//booleanValue=JsonLiteralBoolean
		public Assignment getBooleanValueAssignment_7() { return cBooleanValueAssignment_7; }

		//JsonLiteralBoolean
		public RuleCall getBooleanValueJsonLiteralBooleanEnumRuleCall_7_0() { return cBooleanValueJsonLiteralBooleanEnumRuleCall_7_0; }

		//metaScalarValue=JsonMetaScalarType
		public Assignment getMetaScalarValueAssignment_8() { return cMetaScalarValueAssignment_8; }

		//JsonMetaScalarType
		public RuleCall getMetaScalarValueJsonMetaScalarTypeEnumRuleCall_8_0() { return cMetaScalarValueJsonMetaScalarTypeEnumRuleCall_8_0; }
	}

	public class JsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyValuePairAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeyValuePairJsonKeyValuePairParserRuleCall_1_0 = (RuleCall)cKeyValuePairAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cKeyValuePairAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cKeyValuePairJsonKeyValuePairParserRuleCall_2_1_0 = (RuleCall)cKeyValuePairAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JsonObject:
		//	"{" keyValuePair+=JsonKeyValuePair ("," keyValuePair+=JsonKeyValuePair)* ","? "}";
		public ParserRule getRule() { return rule; }

		//"{" keyValuePair+=JsonKeyValuePair ("," keyValuePair+=JsonKeyValuePair)* ","? "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//keyValuePair+=JsonKeyValuePair
		public Assignment getKeyValuePairAssignment_1() { return cKeyValuePairAssignment_1; }

		//JsonKeyValuePair
		public RuleCall getKeyValuePairJsonKeyValuePairParserRuleCall_1_0() { return cKeyValuePairJsonKeyValuePairParserRuleCall_1_0; }

		//("," keyValuePair+=JsonKeyValuePair)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//keyValuePair+=JsonKeyValuePair
		public Assignment getKeyValuePairAssignment_2_1() { return cKeyValuePairAssignment_2_1; }

		//JsonKeyValuePair
		public RuleCall getKeyValuePairJsonKeyValuePairParserRuleCall_2_1_0() { return cKeyValuePairJsonKeyValuePairParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class JsonKeyValuePairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonKeyValuePair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeySTRINGTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueJsonObjectValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//JsonKeyValuePair:
		//	key=STRING ":" value=JsonObjectValue;
		public ParserRule getRule() { return rule; }

		//key=STRING ":" value=JsonObjectValue
		public Group getGroup() { return cGroup; }

		//key=STRING
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_0_0() { return cKeySTRINGTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=JsonObjectValue
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//JsonObjectValue
		public RuleCall getValueJsonObjectValueParserRuleCall_2_0() { return cValueJsonObjectValueParserRuleCall_2_0; }
	}

	public class JsonArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cItemsJsonObjectValueParserRuleCall_1_0 = (RuleCall)cItemsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cItemsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cItemsJsonObjectValueParserRuleCall_2_1_0 = (RuleCall)cItemsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//JsonArray:
		//	"[" items+=JsonObjectValue ("," items+=JsonObjectValue)* ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" items+=JsonObjectValue ("," items+=JsonObjectValue)* ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//items+=JsonObjectValue
		public Assignment getItemsAssignment_1() { return cItemsAssignment_1; }

		//JsonObjectValue
		public RuleCall getItemsJsonObjectValueParserRuleCall_1_0() { return cItemsJsonObjectValueParserRuleCall_1_0; }

		//("," items+=JsonObjectValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//items+=JsonObjectValue
		public Assignment getItemsAssignment_2_1() { return cItemsAssignment_2_1; }

		//JsonObjectValue
		public RuleCall getItemsJsonObjectValueParserRuleCall_2_1_0() { return cItemsJsonObjectValueParserRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class JsonEnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonEnumType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JsonEnumType:
		//	"enum" "{" STRING ("," STRING)* ","? "}";
		public ParserRule getRule() { return rule; }

		//"enum" "{" STRING ("," STRING)* ","? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//("," STRING)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_3_1() { return cSTRINGTerminalRuleCall_3_1; }

		//","?
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class MobgenResourceDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MobgenResourceDefinition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMapInstanceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEnumInstanceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// **
		// * 
		// * Mobgen resource generator
		// * 
		// * / MobgenResourceDefinition:
		//	MapInstance | EnumInstance;
		public ParserRule getRule() { return rule; }

		//MapInstance | EnumInstance
		public Alternatives getAlternatives() { return cAlternatives; }

		//MapInstance
		public RuleCall getMapInstanceParserRuleCall_0() { return cMapInstanceParserRuleCall_0; }

		//EnumInstance
		public RuleCall getEnumInstanceParserRuleCall_1() { return cEnumInstanceParserRuleCall_1; }
	}

	public class EnumInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuesIDTerminalRuleCall_3_0 = (RuleCall)cValuesAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cValuesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cValuesIDTerminalRuleCall_4_1_0 = (RuleCall)cValuesAssignment_4_1.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//EnumInstance:
		//	"enum" name=ID "{" values+=ID ("," values+=ID)* ","? "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" values+=ID ("," values+=ID)* ","? "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//values+=ID
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_3_0() { return cValuesIDTerminalRuleCall_3_0; }

		//("," values+=ID)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//values+=ID
		public Assignment getValuesAssignment_4_1() { return cValuesAssignment_4_1; }

		//ID
		public RuleCall getValuesIDTerminalRuleCall_4_1_0() { return cValuesIDTerminalRuleCall_4_1_0; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MapInstanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapInstance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMapKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cKeysAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cKeysIDTerminalRuleCall_3_0_0 = (RuleCall)cKeysAssignment_3_0.eContents().get(0);
		private final Keyword cColonKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cValuesAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cValuesNestedTypeParserRuleCall_3_2_0 = (RuleCall)cValuesAssignment_3_2.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cKeysAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cKeysIDTerminalRuleCall_4_1_0 = (RuleCall)cKeysAssignment_4_1.eContents().get(0);
		private final Keyword cColonKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cValuesAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cValuesNestedTypeParserRuleCall_4_3_0 = (RuleCall)cValuesAssignment_4_3.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MapInstance:
		//	"map" name=ID "{" (keys+=ID ":" values+=NestedType) ("," keys+=ID ":" values+=NestedType)* ","? // you must have at least one map
		//	"}";
		public ParserRule getRule() { return rule; }

		//"map" name=ID "{" (keys+=ID ":" values+=NestedType) ("," keys+=ID ":" values+=NestedType)* ","? // you must have at least one map
		//"}"
		public Group getGroup() { return cGroup; }

		//"map"
		public Keyword getMapKeyword_0() { return cMapKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//keys+=ID ":" values+=NestedType
		public Group getGroup_3() { return cGroup_3; }

		//keys+=ID
		public Assignment getKeysAssignment_3_0() { return cKeysAssignment_3_0; }

		//ID
		public RuleCall getKeysIDTerminalRuleCall_3_0_0() { return cKeysIDTerminalRuleCall_3_0_0; }

		//":"
		public Keyword getColonKeyword_3_1() { return cColonKeyword_3_1; }

		//values+=NestedType
		public Assignment getValuesAssignment_3_2() { return cValuesAssignment_3_2; }

		//NestedType
		public RuleCall getValuesNestedTypeParserRuleCall_3_2_0() { return cValuesNestedTypeParserRuleCall_3_2_0; }

		//("," keys+=ID ":" values+=NestedType)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//keys+=ID
		public Assignment getKeysAssignment_4_1() { return cKeysAssignment_4_1; }

		//ID
		public RuleCall getKeysIDTerminalRuleCall_4_1_0() { return cKeysIDTerminalRuleCall_4_1_0; }

		//":"
		public Keyword getColonKeyword_4_2() { return cColonKeyword_4_2; }

		//values+=NestedType
		public Assignment getValuesAssignment_4_3() { return cValuesAssignment_4_3; }

		//NestedType
		public RuleCall getValuesNestedTypeParserRuleCall_4_3_0() { return cValuesNestedTypeParserRuleCall_4_3_0; }

		//","?
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//// you must have at least one map
		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class StringListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringList:
		//	"[" values+=STRING ("," values+=STRING)* ","? "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=STRING ("," values+=STRING)* ","? "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=STRING
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_1_0() { return cValuesSTRINGTerminalRuleCall_1_0; }

		//("," values+=STRING)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=STRING
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_1_0() { return cValuesSTRINGTerminalRuleCall_2_1_0; }

		//","?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class NestedTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NestedType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cListStringListParserRuleCall_0_0 = (RuleCall)cListAssignment_0.eContents().get(0);
		private final Assignment cStringAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0 = (RuleCall)cStringAssignment_1.eContents().get(0);
		
		//NestedType:
		//	list=StringList | string=STRING;
		public ParserRule getRule() { return rule; }

		//list=StringList | string=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//list=StringList
		public Assignment getListAssignment_0() { return cListAssignment_0; }

		//StringList
		public RuleCall getListStringListParserRuleCall_0_0() { return cListStringListParserRuleCall_0_0; }

		//string=STRING
		public Assignment getStringAssignment_1() { return cStringAssignment_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0() { return cStringSTRINGTerminalRuleCall_1_0; }
	}

	public class URIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "URI");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUrlPrefixAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUrlPrefixURL_PREFIXTerminalRuleCall_0_0 = (RuleCall)cUrlPrefixAssignment_0.eContents().get(0);
		private final Assignment cPathAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPathURL_PATHTerminalRuleCall_1_0 = (RuleCall)cPathAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPathParametersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPathParametersIDTerminalRuleCall_2_1_0 = (RuleCall)cPathParametersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cPathSuffixAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cPathSuffixURL_PATHTerminalRuleCall_2_3_0 = (RuleCall)cPathSuffixAssignment_2_3.eContents().get(0);
		private final Assignment cQueryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cQueryURL_QUERYTerminalRuleCall_3_0 = (RuleCall)cQueryAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cQueryParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cQueryParametersIDTerminalRuleCall_4_1_0 = (RuleCall)cQueryParametersAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cQuerySuffixAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cQuerySuffixURL_QUERY_SUFFIXTerminalRuleCall_4_3_0 = (RuleCall)cQuerySuffixAssignment_4_3.eContents().get(0);
		
		//// caveat: due to a hack numbers may not occur after the queryParameters
		/// * 
		//URI:
		//    urlPrefix=URL_PREFIX path=URL_PATH ('{' pathParameters+=ID '}' pathSuffix+=URL_PATH)* (query+=(URL_QUERY) '{' queryParameters+=ID '}' query+=ANY_OTHER*)* 
		//;
		// * / / *
		//terminal ANY_OTHER_WITHOUT_CHEVRON: // TODO test this
		//	!('{')
		//;
		// * / / *
		//URI:
		//       stringPrefix+=(ANY_OTHER)+ ('{' parameters+=ID '}' stringSuffix+=ANY_OTHER_WITHOUT_CHEVRON)+
		//;
		// * / URI:
		//	urlPrefix=URL_PREFIX path=URL_PATH ("{" pathParameters+=ID "}" pathSuffix+=URL_PATH)* query+=URL_QUERY ("{"
		//	queryParameters+=ID "}" querySuffix+=URL_QUERY_SUFFIX)*;
		public ParserRule getRule() { return rule; }

		//urlPrefix=URL_PREFIX path=URL_PATH ("{" pathParameters+=ID "}" pathSuffix+=URL_PATH)* query+=URL_QUERY ("{"
		//queryParameters+=ID "}" querySuffix+=URL_QUERY_SUFFIX)*
		public Group getGroup() { return cGroup; }

		//urlPrefix=URL_PREFIX
		public Assignment getUrlPrefixAssignment_0() { return cUrlPrefixAssignment_0; }

		//URL_PREFIX
		public RuleCall getUrlPrefixURL_PREFIXTerminalRuleCall_0_0() { return cUrlPrefixURL_PREFIXTerminalRuleCall_0_0; }

		//path=URL_PATH
		public Assignment getPathAssignment_1() { return cPathAssignment_1; }

		//URL_PATH
		public RuleCall getPathURL_PATHTerminalRuleCall_1_0() { return cPathURL_PATHTerminalRuleCall_1_0; }

		//("{" pathParameters+=ID "}" pathSuffix+=URL_PATH)*
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//pathParameters+=ID
		public Assignment getPathParametersAssignment_2_1() { return cPathParametersAssignment_2_1; }

		//ID
		public RuleCall getPathParametersIDTerminalRuleCall_2_1_0() { return cPathParametersIDTerminalRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }

		//pathSuffix+=URL_PATH
		public Assignment getPathSuffixAssignment_2_3() { return cPathSuffixAssignment_2_3; }

		//URL_PATH
		public RuleCall getPathSuffixURL_PATHTerminalRuleCall_2_3_0() { return cPathSuffixURL_PATHTerminalRuleCall_2_3_0; }

		//query+=URL_QUERY
		public Assignment getQueryAssignment_3() { return cQueryAssignment_3; }

		//URL_QUERY
		public RuleCall getQueryURL_QUERYTerminalRuleCall_3_0() { return cQueryURL_QUERYTerminalRuleCall_3_0; }

		//("{" queryParameters+=ID "}" querySuffix+=URL_QUERY_SUFFIX)*
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//queryParameters+=ID
		public Assignment getQueryParametersAssignment_4_1() { return cQueryParametersAssignment_4_1; }

		//ID
		public RuleCall getQueryParametersIDTerminalRuleCall_4_1_0() { return cQueryParametersIDTerminalRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_2() { return cRightCurlyBracketKeyword_4_2; }

		//querySuffix+=URL_QUERY_SUFFIX
		public Assignment getQuerySuffixAssignment_4_3() { return cQuerySuffixAssignment_4_3; }

		//URL_QUERY_SUFFIX
		public RuleCall getQuerySuffixURL_QUERY_SUFFIXTerminalRuleCall_4_3_0() { return cQuerySuffixURL_QUERY_SUFFIXTerminalRuleCall_4_3_0; }
	}
	
	
	public class RestfulMethodsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RestfulMethods");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPutEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPutPUTKeyword_0_0 = (Keyword)cPutEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPostEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPostPOSTKeyword_1_0 = (Keyword)cPostEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cGetEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cGetGETKeyword_2_0 = (Keyword)cGetEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDeleteEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDeleteDELETEKeyword_3_0 = (Keyword)cDeleteEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum RestfulMethods:
		//	put="PUT" | post="POST" | get="GET" | delete= // TODO HEAD | TRACE etc. will be automagically generated as well, a body-less response
		//	"DELETE";
		public EnumRule getRule() { return rule; }

		//put="PUT" | post="POST" | get="GET" | delete= // TODO HEAD | TRACE etc. will be automagically generated as well, a body-less response
		//"DELETE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//put="PUT"
		public EnumLiteralDeclaration getPutEnumLiteralDeclaration_0() { return cPutEnumLiteralDeclaration_0; }

		//"PUT"
		public Keyword getPutPUTKeyword_0_0() { return cPutPUTKeyword_0_0; }

		//post="POST"
		public EnumLiteralDeclaration getPostEnumLiteralDeclaration_1() { return cPostEnumLiteralDeclaration_1; }

		//"POST"
		public Keyword getPostPOSTKeyword_1_0() { return cPostPOSTKeyword_1_0; }

		//get="GET"
		public EnumLiteralDeclaration getGetEnumLiteralDeclaration_2() { return cGetEnumLiteralDeclaration_2; }

		//"GET"
		public Keyword getGetGETKeyword_2_0() { return cGetGETKeyword_2_0; }

		//delete= // TODO HEAD | TRACE etc. will be automagically generated as well, a body-less response
		//"DELETE"
		public EnumLiteralDeclaration getDeleteEnumLiteralDeclaration_3() { return cDeleteEnumLiteralDeclaration_3; }

		//// TODO HEAD | TRACE etc. will be automagically generated as well, a body-less response
		//"DELETE"
		public Keyword getDeleteDELETEKeyword_3_0() { return cDeleteDELETEKeyword_3_0; }
	}

	public class JsonMetaScalarTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JsonMetaScalarType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOOLEANEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOOLEANBooleanKeyword_0_0 = (Keyword)cBOOLEANEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNUMBEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNUMBERNumberKeyword_1_0 = (Keyword)cNUMBEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSTRINGStringKeyword_2_0 = (Keyword)cSTRINGEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum JsonMetaScalarType:
		//	BOOLEAN="boolean" | NUMBER="number" | STRING="string";
		public EnumRule getRule() { return rule; }

		//BOOLEAN="boolean" | NUMBER="number" | STRING="string"
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOOLEAN="boolean"
		public EnumLiteralDeclaration getBOOLEANEnumLiteralDeclaration_0() { return cBOOLEANEnumLiteralDeclaration_0; }

		//"boolean"
		public Keyword getBOOLEANBooleanKeyword_0_0() { return cBOOLEANBooleanKeyword_0_0; }

		//NUMBER="number"
		public EnumLiteralDeclaration getNUMBEREnumLiteralDeclaration_1() { return cNUMBEREnumLiteralDeclaration_1; }

		//"number"
		public Keyword getNUMBERNumberKeyword_1_0() { return cNUMBERNumberKeyword_1_0; }

		//STRING="string"
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_2() { return cSTRINGEnumLiteralDeclaration_2; }

		//"string"
		public Keyword getSTRINGStringKeyword_2_0() { return cSTRINGStringKeyword_2_0; }
	}

	public class JsonLiteralBooleanElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "JsonLiteralBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTrueEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFalseEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFalseFalseKeyword_1_0 = (Keyword)cFalseEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum JsonLiteralBoolean:
		//	true | false;
		public EnumRule getRule() { return rule; }

		//true | false
		public Alternatives getAlternatives() { return cAlternatives; }

		//true
		public EnumLiteralDeclaration getTrueEnumLiteralDeclaration_0() { return cTrueEnumLiteralDeclaration_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//false
		public EnumLiteralDeclaration getFalseEnumLiteralDeclaration_1() { return cFalseEnumLiteralDeclaration_1; }

		//"false"
		public Keyword getFalseFalseKeyword_1_0() { return cFalseFalseKeyword_1_0; }
	}
	
	private MobgenElements pMobgen;
	private MobgenCallDefinitionElements pMobgenCallDefinition;
	private MobgenHeaderElements pMobgenHeader;
	private MobgenHeaderKeyValuePairElements pMobgenHeaderKeyValuePair;
	private MobgenHeaderParameterElements pMobgenHeaderParameter;
	private RestfulMethodsElements unknownRuleRestfulMethods;
	private MobgenJsonElements pMobgenJson;
	private JsonObjectValueElements pJsonObjectValue;
	private JsonCompositeValueElements pJsonCompositeValue;
	private JsonLiteralValueElements pJsonLiteralValue;
	private JsonObjectElements pJsonObject;
	private JsonKeyValuePairElements pJsonKeyValuePair;
	private JsonArrayElements pJsonArray;
	private JsonMetaScalarTypeElements unknownRuleJsonMetaScalarType;
	private JsonEnumTypeElements pJsonEnumType;
	private TerminalRule tEMPTY_JSON_OBJECT;
	private TerminalRule tEMPTY_JSON_ARRAY;
	private TerminalRule tJSON_LITERAL_NULL;
	private JsonLiteralBooleanElements unknownRuleJsonLiteralBoolean;
	private TerminalRule tJSON_NUMBER_FLOAT;
	private MobgenResourceDefinitionElements pMobgenResourceDefinition;
	private EnumInstanceElements pEnumInstance;
	private MapInstanceElements pMapInstance;
	private StringListElements pStringList;
	private NestedTypeElements pNestedType;
	private TerminalRule tURL_PREFIX;
	private TerminalRule tURL_PATH;
	private TerminalRule tURL_QUERY;
	private TerminalRule tURL_QUERY_SUFFIX;
	private URIElements pURI;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public RestfulGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.sison.dsl.mobgen.Restful".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	/// *
	// * 
	// * Handy links:
	// * * http://pettergraff.blogspot.nl/2009/12/deploying-code-generator-with.html
	// * * http://charandeepmatta.com/2012/09/01/how-to-generate-eclipse-plugin-for-your-dsl-written-in-xtext/ - sharing your plugin
	// * * http://www.techjava.de/topics/2010/06/extending-xtext-build-participants/ - using "Nature" to distinguish DSLs
	// * * http://stackoverflow.com/questions/10917386/linking-xtext-with-stringtemplate-code-generator - run the generator from Main.java
	// * * http://wiki.eclipse.org/Xtext/FAQ#How_do_I_load_my_model_in_a_standalone_Java_application.C2.A0.3F - run xtend generation as standalone, e.g. from main method
	// * * http://davehofmann.de/blog/?p=101 // - standalone way of setting up the generator
	// * * http://koehnlein.blogspot.de/2012/11/xtext-tip-how-do-i-get-guice-injector.html - Guice and standalone dependency injection
	// * * http://christiandietrich.wordpress.com/2011/10/15/xtext-calling-the-generator-from-a-context-menu/ - Running "Generate code" from the context menu
	// * 
	// * IDEA name for the project, plate smasher (boilerplate smasher)
	// * IDEA feed vector graphics, generate assets l, m, h, xh, xxh, xxxh, pixel dimensions
	// * 
	// * -JS (06-Mar-2014)
	// * 
	// * / / **
	// * 
	// * Mobgen http call generator parser
	// * 
	// * / Mobgen:
	//	(resources+=MobgenResourceDefinition | calls+=MobgenCallDefinition)*;
	public MobgenElements getMobgenAccess() {
		return (pMobgen != null) ? pMobgen : (pMobgen = new MobgenElements());
	}
	
	public ParserRule getMobgenRule() {
		return getMobgenAccess().getRule();
	}

	/// **
	// * Only POST / PUT request method can do a 'server' 'expects' 
	// * / MobgenCallDefinition:
	//	"call" name=ID ":" method=RestfulMethods "from" uri=URI ("with" "headers" "from" "request" requestHeaders=MobgenHeader
	//	("and" "response" responseHeaders=MobgenHeader)?)? ("client" "expects" jsonToClient=MobgenJson)? ("server" "expects"
	//	jsonToServer=MobgenJson)?;
	public MobgenCallDefinitionElements getMobgenCallDefinitionAccess() {
		return (pMobgenCallDefinition != null) ? pMobgenCallDefinition : (pMobgenCallDefinition = new MobgenCallDefinitionElements());
	}
	
	public ParserRule getMobgenCallDefinitionRule() {
		return getMobgenCallDefinitionAccess().getRule();
	}

	//MobgenHeader:
	//	name=ID "\'\'\'" "{" headerKeyValues+=MobgenHeaderKeyValuePair ("," headerKeyValues+=MobgenHeaderKeyValuePair)* ","?
	//	"}" "\'\'\'";
	public MobgenHeaderElements getMobgenHeaderAccess() {
		return (pMobgenHeader != null) ? pMobgenHeader : (pMobgenHeader = new MobgenHeaderElements());
	}
	
	public ParserRule getMobgenHeaderRule() {
		return getMobgenHeaderAccess().getRule();
	}

	//MobgenHeaderKeyValuePair:
	//	key=STRING "=" (value=STRING | parameter=MobgenHeaderParameter);
	public MobgenHeaderKeyValuePairElements getMobgenHeaderKeyValuePairAccess() {
		return (pMobgenHeaderKeyValuePair != null) ? pMobgenHeaderKeyValuePair : (pMobgenHeaderKeyValuePair = new MobgenHeaderKeyValuePairElements());
	}
	
	public ParserRule getMobgenHeaderKeyValuePairRule() {
		return getMobgenHeaderKeyValuePairAccess().getRule();
	}

	//MobgenHeaderParameter:
	//	"{" id=ID "}";
	public MobgenHeaderParameterElements getMobgenHeaderParameterAccess() {
		return (pMobgenHeaderParameter != null) ? pMobgenHeaderParameter : (pMobgenHeaderParameter = new MobgenHeaderParameterElements());
	}
	
	public ParserRule getMobgenHeaderParameterRule() {
		return getMobgenHeaderParameterAccess().getRule();
	}

	//enum RestfulMethods:
	//	put="PUT" | post="POST" | get="GET" | delete= // TODO HEAD | TRACE etc. will be automagically generated as well, a body-less response
	//	"DELETE";
	public RestfulMethodsElements getRestfulMethodsAccess() {
		return (unknownRuleRestfulMethods != null) ? unknownRuleRestfulMethods : (unknownRuleRestfulMethods = new RestfulMethodsElements());
	}
	
	public EnumRule getRestfulMethodsRule() {
		return getRestfulMethodsAccess().getRule();
	}

	//MobgenJson:
	//	name=ID "\'\'\'" value=JsonObjectValue "\'\'\'";
	public MobgenJsonElements getMobgenJsonAccess() {
		return (pMobgenJson != null) ? pMobgenJson : (pMobgenJson = new MobgenJsonElements());
	}
	
	public ParserRule getMobgenJsonRule() {
		return getMobgenJsonAccess().getRule();
	}

	/// **
	// *  Borrowed from http://www.ebpml.org/blog2/index.php/2010/11/05/mde-xtext-and-json
	// * / JsonObjectValue:
	//	scalar=JsonLiteralValue | composite=JsonCompositeValue;
	public JsonObjectValueElements getJsonObjectValueAccess() {
		return (pJsonObjectValue != null) ? pJsonObjectValue : (pJsonObjectValue = new JsonObjectValueElements());
	}
	
	public ParserRule getJsonObjectValueRule() {
		return getJsonObjectValueAccess().getRule();
	}

	//JsonCompositeValue:
	//	objectValue=JsonObject | arrayValue=JsonArray;
	public JsonCompositeValueElements getJsonCompositeValueAccess() {
		return (pJsonCompositeValue != null) ? pJsonCompositeValue : (pJsonCompositeValue = new JsonCompositeValueElements());
	}
	
	public ParserRule getJsonCompositeValueRule() {
		return getJsonCompositeValueAccess().getRule();
	}

	//JsonLiteralValue:
	//	literalString?=STRING | emptyObject?=EMPTY_JSON_OBJECT | emptyArray?=EMPTY_JSON_ARRAY | literalNull?=JSON_LITERAL_NULL
	//	| numberFloat?=JSON_NUMBER_FLOAT | numberInteger?=INT | enumType?=JsonEnumType | booleanValue=JsonLiteralBoolean |
	//	metaScalarValue=JsonMetaScalarType;
	public JsonLiteralValueElements getJsonLiteralValueAccess() {
		return (pJsonLiteralValue != null) ? pJsonLiteralValue : (pJsonLiteralValue = new JsonLiteralValueElements());
	}
	
	public ParserRule getJsonLiteralValueRule() {
		return getJsonLiteralValueAccess().getRule();
	}

	//JsonObject:
	//	"{" keyValuePair+=JsonKeyValuePair ("," keyValuePair+=JsonKeyValuePair)* ","? "}";
	public JsonObjectElements getJsonObjectAccess() {
		return (pJsonObject != null) ? pJsonObject : (pJsonObject = new JsonObjectElements());
	}
	
	public ParserRule getJsonObjectRule() {
		return getJsonObjectAccess().getRule();
	}

	//JsonKeyValuePair:
	//	key=STRING ":" value=JsonObjectValue;
	public JsonKeyValuePairElements getJsonKeyValuePairAccess() {
		return (pJsonKeyValuePair != null) ? pJsonKeyValuePair : (pJsonKeyValuePair = new JsonKeyValuePairElements());
	}
	
	public ParserRule getJsonKeyValuePairRule() {
		return getJsonKeyValuePairAccess().getRule();
	}

	//JsonArray:
	//	"[" items+=JsonObjectValue ("," items+=JsonObjectValue)* ","? "]";
	public JsonArrayElements getJsonArrayAccess() {
		return (pJsonArray != null) ? pJsonArray : (pJsonArray = new JsonArrayElements());
	}
	
	public ParserRule getJsonArrayRule() {
		return getJsonArrayAccess().getRule();
	}

	//enum JsonMetaScalarType:
	//	BOOLEAN="boolean" | NUMBER="number" | STRING="string";
	public JsonMetaScalarTypeElements getJsonMetaScalarTypeAccess() {
		return (unknownRuleJsonMetaScalarType != null) ? unknownRuleJsonMetaScalarType : (unknownRuleJsonMetaScalarType = new JsonMetaScalarTypeElements());
	}
	
	public EnumRule getJsonMetaScalarTypeRule() {
		return getJsonMetaScalarTypeAccess().getRule();
	}

	//JsonEnumType:
	//	"enum" "{" STRING ("," STRING)* ","? "}";
	public JsonEnumTypeElements getJsonEnumTypeAccess() {
		return (pJsonEnumType != null) ? pJsonEnumType : (pJsonEnumType = new JsonEnumTypeElements());
	}
	
	public ParserRule getJsonEnumTypeRule() {
		return getJsonEnumTypeAccess().getRule();
	}

	//terminal EMPTY_JSON_OBJECT:
	//	"{}";
	public TerminalRule getEMPTY_JSON_OBJECTRule() {
		return (tEMPTY_JSON_OBJECT != null) ? tEMPTY_JSON_OBJECT : (tEMPTY_JSON_OBJECT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTY_JSON_OBJECT"));
	} 

	//terminal EMPTY_JSON_ARRAY:
	//	"[]";
	public TerminalRule getEMPTY_JSON_ARRAYRule() {
		return (tEMPTY_JSON_ARRAY != null) ? tEMPTY_JSON_ARRAY : (tEMPTY_JSON_ARRAY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EMPTY_JSON_ARRAY"));
	} 

	//terminal JSON_LITERAL_NULL:
	//	"null";
	public TerminalRule getJSON_LITERAL_NULLRule() {
		return (tJSON_LITERAL_NULL != null) ? tJSON_LITERAL_NULL : (tJSON_LITERAL_NULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JSON_LITERAL_NULL"));
	} 

	//enum JsonLiteralBoolean:
	//	true | false;
	public JsonLiteralBooleanElements getJsonLiteralBooleanAccess() {
		return (unknownRuleJsonLiteralBoolean != null) ? unknownRuleJsonLiteralBoolean : (unknownRuleJsonLiteralBoolean = new JsonLiteralBooleanElements());
	}
	
	public EnumRule getJsonLiteralBooleanRule() {
		return getJsonLiteralBooleanAccess().getRule();
	}

	//terminal JSON_NUMBER_FLOAT:
	//	INT ("." INT) // TODO support float and INT
	//;
	public TerminalRule getJSON_NUMBER_FLOATRule() {
		return (tJSON_NUMBER_FLOAT != null) ? tJSON_NUMBER_FLOAT : (tJSON_NUMBER_FLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JSON_NUMBER_FLOAT"));
	} 

	/// **
	// * 
	// * Mobgen resource generator
	// * 
	// * / MobgenResourceDefinition:
	//	MapInstance | EnumInstance;
	public MobgenResourceDefinitionElements getMobgenResourceDefinitionAccess() {
		return (pMobgenResourceDefinition != null) ? pMobgenResourceDefinition : (pMobgenResourceDefinition = new MobgenResourceDefinitionElements());
	}
	
	public ParserRule getMobgenResourceDefinitionRule() {
		return getMobgenResourceDefinitionAccess().getRule();
	}

	//EnumInstance:
	//	"enum" name=ID "{" values+=ID ("," values+=ID)* ","? "}";
	public EnumInstanceElements getEnumInstanceAccess() {
		return (pEnumInstance != null) ? pEnumInstance : (pEnumInstance = new EnumInstanceElements());
	}
	
	public ParserRule getEnumInstanceRule() {
		return getEnumInstanceAccess().getRule();
	}

	//MapInstance:
	//	"map" name=ID "{" (keys+=ID ":" values+=NestedType) ("," keys+=ID ":" values+=NestedType)* ","? // you must have at least one map
	//	"}";
	public MapInstanceElements getMapInstanceAccess() {
		return (pMapInstance != null) ? pMapInstance : (pMapInstance = new MapInstanceElements());
	}
	
	public ParserRule getMapInstanceRule() {
		return getMapInstanceAccess().getRule();
	}

	//StringList:
	//	"[" values+=STRING ("," values+=STRING)* ","? "]";
	public StringListElements getStringListAccess() {
		return (pStringList != null) ? pStringList : (pStringList = new StringListElements());
	}
	
	public ParserRule getStringListRule() {
		return getStringListAccess().getRule();
	}

	//NestedType:
	//	list=StringList | string=STRING;
	public NestedTypeElements getNestedTypeAccess() {
		return (pNestedType != null) ? pNestedType : (pNestedType = new NestedTypeElements());
	}
	
	public ParserRule getNestedTypeRule() {
		return getNestedTypeAccess().getRule();
	}

	//// lifted off from http://xtexterience.wordpress.com/2011/06/08/urls-in-xtext/
	//terminal URL_PREFIX:
	//	"http" "s"? "://" "0".."9"+ "." "0".."9"+ "." "0".."9"+ "." "0".."9"+ | (("a".."z" | "A".."Z") ("a".."z" | "A".."Z" |
	//	"0".."9" | "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")* ("." ("a".."z" | "A".."Z") ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "\\" ("0".."9" | "a".."f" |
	//	"A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")*)*) (":" "0".."9"+)? // Portnumber
	//;
	public TerminalRule getURL_PREFIXRule() {
		return (tURL_PREFIX != null) ? tURL_PREFIX : (tURL_PREFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL_PREFIX"));
	} 

	//// Path
	//terminal URL_PATH:
	//	("/" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "~" | "+" | "." | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")*)*;
	public TerminalRule getURL_PATHRule() {
		return (tURL_PATH != null) ? tURL_PATH : (tURL_PATH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL_PATH"));
	} 

	//terminal URL_QUERY:
	//	("?" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F")
	//	("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")+ ("+" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" |
	//	"=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9"
	//	"0".."9")+)*)?;
	public TerminalRule getURL_QUERYRule() {
		return (tURL_QUERY != null) ? tURL_QUERY : (tURL_QUERY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL_QUERY"));
	} 

	//terminal URL_QUERY_SUFFIX:
	//	("&" "a".."z" | "A".."Z" | / *'0'..'9'|* / // Super-hack, TODO determine how to redefine this terminal rule so it won't clash with antlr RULE_INT
	//	"$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" | "a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%"
	//	"0".."9" "0".."9")+ ("+" ("a".."z" | "A".."Z" | "0".."9" | "$" | "-" | "_" | "=" | "&" | ";" | "\\" ("0".."9" |
	//	"a".."f" | "A".."F") ("0".."9" | "a".."f" | "A".."F") | "%" "0".."9" "0".."9")+)*;
	public TerminalRule getURL_QUERY_SUFFIXRule() {
		return (tURL_QUERY_SUFFIX != null) ? tURL_QUERY_SUFFIX : (tURL_QUERY_SUFFIX = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "URL_QUERY_SUFFIX"));
	} 

	//// caveat: due to a hack numbers may not occur after the queryParameters
	/// * 
	//URI:
	//    urlPrefix=URL_PREFIX path=URL_PATH ('{' pathParameters+=ID '}' pathSuffix+=URL_PATH)* (query+=(URL_QUERY) '{' queryParameters+=ID '}' query+=ANY_OTHER*)* 
	//;
	// * / / *
	//terminal ANY_OTHER_WITHOUT_CHEVRON: // TODO test this
	//	!('{')
	//;
	// * / / *
	//URI:
	//       stringPrefix+=(ANY_OTHER)+ ('{' parameters+=ID '}' stringSuffix+=ANY_OTHER_WITHOUT_CHEVRON)+
	//;
	// * / URI:
	//	urlPrefix=URL_PREFIX path=URL_PATH ("{" pathParameters+=ID "}" pathSuffix+=URL_PATH)* query+=URL_QUERY ("{"
	//	queryParameters+=ID "}" querySuffix+=URL_QUERY_SUFFIX)*;
	public URIElements getURIAccess() {
		return (pURI != null) ? pURI : (pURI = new URIElements());
	}
	
	public ParserRule getURIRule() {
		return getURIAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
