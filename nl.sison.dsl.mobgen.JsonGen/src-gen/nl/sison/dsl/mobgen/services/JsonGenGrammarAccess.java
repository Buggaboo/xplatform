/*
* generated by Xtext
*/
package nl.sison.dsl.mobgen.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class JsonGenGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JsonObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cMembersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_1_0 = (RuleCall)cMembersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cMembersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cMembersMemberParserRuleCall_2_1_0 = (RuleCall)cMembersAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonObject:
		//	"{" members+=Member ("," members+=Member)* "}";
		public ParserRule getRule() { return rule; }

		//"{" members+=Member ("," members+=Member)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//members+=Member
		public Assignment getMembersAssignment_1() { return cMembersAssignment_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_1_0() { return cMembersMemberParserRuleCall_1_0; }

		//("," members+=Member)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//members+=Member
		public Assignment getMembersAssignment_2_1() { return cMembersAssignment_2_1; }

		//Member
		public RuleCall getMembersMemberParserRuleCall_2_1_0() { return cMembersMemberParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Member");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOptionalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOptionalQuestionMarkKeyword_0_0 = (Keyword)cOptionalAssignment_0.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueJsonValueParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//Member:
		//	optional?="?"? key=STRING ":" value=JsonValue;
		public ParserRule getRule() { return rule; }

		//optional?="?"? key=STRING ":" value=JsonValue
		public Group getGroup() { return cGroup; }

		//optional?="?"?
		public Assignment getOptionalAssignment_0() { return cOptionalAssignment_0; }

		//"?"
		public Keyword getOptionalQuestionMarkKeyword_0_0() { return cOptionalQuestionMarkKeyword_0_0; }

		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//value=JsonValue
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }

		//JsonValue
		public RuleCall getValueJsonValueParserRuleCall_3_0() { return cValueJsonValueParserRuleCall_3_0; }
	}

	public class JsonValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cObjAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cObjJsonObjectParserRuleCall_0_0 = (RuleCall)cObjAssignment_0.eContents().get(0);
		private final Assignment cStrAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cStrSTRINGTerminalRuleCall_1_0 = (RuleCall)cStrAssignment_1.eContents().get(0);
		private final Assignment cArrayAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cArrayJsonArrayParserRuleCall_2_0 = (RuleCall)cArrayAssignment_2.eContents().get(0);
		private final Assignment cBoolAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cBoolJSON_BOOLEANTerminalRuleCall_3_0 = (RuleCall)cBoolAssignment_3.eContents().get(0);
		private final Assignment cNullAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cNullJSON_NULLTerminalRuleCall_4_0 = (RuleCall)cNullAssignment_4.eContents().get(0);
		private final Assignment cNumberAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cNumberJsonNumberParserRuleCall_5_0 = (RuleCall)cNumberAssignment_5.eContents().get(0);
		private final Assignment cStrFromEnumAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cStrFromEnumExJsonEnumParserRuleCall_6_0 = (RuleCall)cStrFromEnumAssignment_6.eContents().get(0);
		private final Assignment cDatetimeAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cDatetimeEX_JSON_UTCTerminalRuleCall_7_0 = (RuleCall)cDatetimeAssignment_7.eContents().get(0);
		
		//JsonValue:
		//	obj=JsonObject / * currently ignore nulls * / | str=STRING | array=JsonArray | bool?=JSON_BOOLEAN | null?=JSON_NULL |
		//	number=JsonNumber | strFromEnum=ExJsonEnum | datetime=EX_JSON_UTC;
		public ParserRule getRule() { return rule; }

		//obj=JsonObject / * currently ignore nulls * / | str=STRING | array=JsonArray | bool?=JSON_BOOLEAN | null?=JSON_NULL |
		//number=JsonNumber | strFromEnum=ExJsonEnum | datetime=EX_JSON_UTC
		public Alternatives getAlternatives() { return cAlternatives; }

		//obj=JsonObject
		public Assignment getObjAssignment_0() { return cObjAssignment_0; }

		//JsonObject
		public RuleCall getObjJsonObjectParserRuleCall_0_0() { return cObjJsonObjectParserRuleCall_0_0; }

		//str=STRING
		public Assignment getStrAssignment_1() { return cStrAssignment_1; }

		//STRING
		public RuleCall getStrSTRINGTerminalRuleCall_1_0() { return cStrSTRINGTerminalRuleCall_1_0; }

		//array=JsonArray
		public Assignment getArrayAssignment_2() { return cArrayAssignment_2; }

		//JsonArray
		public RuleCall getArrayJsonArrayParserRuleCall_2_0() { return cArrayJsonArrayParserRuleCall_2_0; }

		//bool?=JSON_BOOLEAN
		public Assignment getBoolAssignment_3() { return cBoolAssignment_3; }

		//JSON_BOOLEAN
		public RuleCall getBoolJSON_BOOLEANTerminalRuleCall_3_0() { return cBoolJSON_BOOLEANTerminalRuleCall_3_0; }

		//null?=JSON_NULL
		public Assignment getNullAssignment_4() { return cNullAssignment_4; }

		//JSON_NULL
		public RuleCall getNullJSON_NULLTerminalRuleCall_4_0() { return cNullJSON_NULLTerminalRuleCall_4_0; }

		//number=JsonNumber
		public Assignment getNumberAssignment_5() { return cNumberAssignment_5; }

		//JsonNumber
		public RuleCall getNumberJsonNumberParserRuleCall_5_0() { return cNumberJsonNumberParserRuleCall_5_0; }

		//strFromEnum=ExJsonEnum
		public Assignment getStrFromEnumAssignment_6() { return cStrFromEnumAssignment_6; }

		//ExJsonEnum
		public RuleCall getStrFromEnumExJsonEnumParserRuleCall_6_0() { return cStrFromEnumExJsonEnumParserRuleCall_6_0; }

		//datetime=EX_JSON_UTC
		public Assignment getDatetimeAssignment_7() { return cDatetimeAssignment_7; }

		//EX_JSON_UTC
		public RuleCall getDatetimeEX_JSON_UTCTerminalRuleCall_7_0() { return cDatetimeEX_JSON_UTCTerminalRuleCall_7_0; }
	}

	public class JsonArrayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonArray");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValuesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValuesJsonValueParserRuleCall_1_0 = (RuleCall)cValuesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cValuesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValuesJsonValueParserRuleCall_2_1_0 = (RuleCall)cValuesAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//JsonArray:
		//	"[" values+=JsonValue ("," values+=JsonValue)* "]";
		public ParserRule getRule() { return rule; }

		//"[" values+=JsonValue ("," values+=JsonValue)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//values+=JsonValue
		public Assignment getValuesAssignment_1() { return cValuesAssignment_1; }

		//JsonValue
		public RuleCall getValuesJsonValueParserRuleCall_1_0() { return cValuesJsonValueParserRuleCall_1_0; }

		//("," values+=JsonValue)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//values+=JsonValue
		public Assignment getValuesAssignment_2_1() { return cValuesAssignment_2_1; }

		//JsonValue
		public RuleCall getValuesJsonValueParserRuleCall_2_1_0() { return cValuesJsonValueParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class JsonNumberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JsonNumber");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cFloatAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cFloatFullStopKeyword_2_0 = (Keyword)cFloatAssignment_2.eContents().get(0);
		private final Assignment cIntValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIntValueINTTerminalRuleCall_3_0 = (RuleCall)cIntValueAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cExpAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Alternatives cExpAlternatives_4_0_0 = (Alternatives)cExpAssignment_4_0.eContents().get(0);
		private final Keyword cExpEKeyword_4_0_0_0 = (Keyword)cExpAlternatives_4_0_0.eContents().get(0);
		private final Keyword cExpEKeyword_4_0_0_1 = (Keyword)cExpAlternatives_4_0_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cExpValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cExpValueINTTerminalRuleCall_4_2_0 = (RuleCall)cExpValueAssignment_4_2.eContents().get(0);
		
		//JsonNumber:
		//	"-"? INT? float?="." intValue=INT (exp?=("E" | "e") "-"? expValue=INT)?;
		public ParserRule getRule() { return rule; }

		//"-"? INT? float?="." intValue=INT (exp?=("E" | "e") "-"? expValue=INT)?
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//float?="."
		public Assignment getFloatAssignment_2() { return cFloatAssignment_2; }

		//"."
		public Keyword getFloatFullStopKeyword_2_0() { return cFloatFullStopKeyword_2_0; }

		//intValue=INT
		public Assignment getIntValueAssignment_3() { return cIntValueAssignment_3; }

		//INT
		public RuleCall getIntValueINTTerminalRuleCall_3_0() { return cIntValueINTTerminalRuleCall_3_0; }

		//(exp?=("E" | "e") "-"? expValue=INT)?
		public Group getGroup_4() { return cGroup_4; }

		//exp?=("E" | "e")
		public Assignment getExpAssignment_4_0() { return cExpAssignment_4_0; }

		//"E" | "e"
		public Alternatives getExpAlternatives_4_0_0() { return cExpAlternatives_4_0_0; }

		//"E"
		public Keyword getExpEKeyword_4_0_0_0() { return cExpEKeyword_4_0_0_0; }

		//"e"
		public Keyword getExpEKeyword_4_0_0_1() { return cExpEKeyword_4_0_0_1; }

		//"-"?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//expValue=INT
		public Assignment getExpValueAssignment_4_2() { return cExpValueAssignment_4_2; }

		//INT
		public RuleCall getExpValueINTTerminalRuleCall_4_2_0() { return cExpValueINTTerminalRuleCall_4_2_0; }
	}

	public class ExJsonEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExJsonEnum");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesSTRINGTerminalRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExJsonEnum:
		//	"enum" "{" values+=STRING ("," values+=STRING) "}";
		public ParserRule getRule() { return rule; }

		//"enum" "{" values+=STRING ("," values+=STRING) "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//values+=STRING
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_2_0() { return cValuesSTRINGTerminalRuleCall_2_0; }

		//"," values+=STRING
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=STRING
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//STRING
		public RuleCall getValuesSTRINGTerminalRuleCall_3_1_0() { return cValuesSTRINGTerminalRuleCall_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private JsonObjectElements pJsonObject;
	private MemberElements pMember;
	private JsonValueElements pJsonValue;
	private JsonArrayElements pJsonArray;
	private TerminalRule tJSON_BOOLEAN;
	private TerminalRule tJSON_NULL;
	private JsonNumberElements pJsonNumber;
	private ExJsonEnumElements pExJsonEnum;
	private TerminalRule tEX_JSON_UTC;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public JsonGenGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("nl.sison.dsl.mobgen.JsonGen".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//JsonObject:
	//	"{" members+=Member ("," members+=Member)* "}";
	public JsonObjectElements getJsonObjectAccess() {
		return (pJsonObject != null) ? pJsonObject : (pJsonObject = new JsonObjectElements());
	}
	
	public ParserRule getJsonObjectRule() {
		return getJsonObjectAccess().getRule();
	}

	//Member:
	//	optional?="?"? key=STRING ":" value=JsonValue;
	public MemberElements getMemberAccess() {
		return (pMember != null) ? pMember : (pMember = new MemberElements());
	}
	
	public ParserRule getMemberRule() {
		return getMemberAccess().getRule();
	}

	//JsonValue:
	//	obj=JsonObject / * currently ignore nulls * / | str=STRING | array=JsonArray | bool?=JSON_BOOLEAN | null?=JSON_NULL |
	//	number=JsonNumber | strFromEnum=ExJsonEnum | datetime=EX_JSON_UTC;
	public JsonValueElements getJsonValueAccess() {
		return (pJsonValue != null) ? pJsonValue : (pJsonValue = new JsonValueElements());
	}
	
	public ParserRule getJsonValueRule() {
		return getJsonValueAccess().getRule();
	}

	//JsonArray:
	//	"[" values+=JsonValue ("," values+=JsonValue)* "]";
	public JsonArrayElements getJsonArrayAccess() {
		return (pJsonArray != null) ? pJsonArray : (pJsonArray = new JsonArrayElements());
	}
	
	public ParserRule getJsonArrayRule() {
		return getJsonArrayAccess().getRule();
	}

	//terminal JSON_BOOLEAN:
	//	"true" | "false" | "boolean";
	public TerminalRule getJSON_BOOLEANRule() {
		return (tJSON_BOOLEAN != null) ? tJSON_BOOLEAN : (tJSON_BOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JSON_BOOLEAN"));
	} 

	//terminal JSON_NULL:
	//	"null";
	public TerminalRule getJSON_NULLRule() {
		return (tJSON_NULL != null) ? tJSON_NULL : (tJSON_NULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "JSON_NULL"));
	} 

	//JsonNumber:
	//	"-"? INT? float?="." intValue=INT (exp?=("E" | "e") "-"? expValue=INT)?;
	public JsonNumberElements getJsonNumberAccess() {
		return (pJsonNumber != null) ? pJsonNumber : (pJsonNumber = new JsonNumberElements());
	}
	
	public ParserRule getJsonNumberRule() {
		return getJsonNumberAccess().getRule();
	}

	//ExJsonEnum:
	//	"enum" "{" values+=STRING ("," values+=STRING) "}";
	public ExJsonEnumElements getExJsonEnumAccess() {
		return (pExJsonEnum != null) ? pExJsonEnum : (pExJsonEnum = new ExJsonEnumElements());
	}
	
	public ParserRule getExJsonEnumRule() {
		return getExJsonEnumAccess().getRule();
	}

	/// *
	// * TODO generate zulu validator SimpleDateFormatter
	// * / terminal EX_JSON_UTC:
	//	"UTC";
	public TerminalRule getEX_JSON_UTCRule() {
		return (tEX_JSON_UTC != null) ? tEX_JSON_UTC : (tEX_JSON_UTC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EX_JSON_UTC"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
