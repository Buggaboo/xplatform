package nl.sison.dsl.mobgen.generator;

import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;

@SuppressWarnings("all")
public class AndroidRestfulHttpRequestGenerator implements IGenerator {
  /**
   * The check for 'P' is to differentiate between calls where the server expects a payload, which are POST and PUT
   * 
   * TODO also generate the AsyncTask for this, because a Loader has a 1..1 relation with the Fragment/Activity
   * and sometimes you prefer to have a 1..n (Fragment/Activity..Asynctask) relations ship
   * 
   * inspired by http://blog.gunawan.me/2011/10/android-asynctaskloader-exception.html
   */
  public CharSequence createLoader(final CharSequence classNamePrefix, final CharSequence returnType, final CharSequence method, final CharSequence requestBody, final CharSequence jsonParserToParcelable, final CharSequence serverBoundPayload) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import android.content.AsyncTaskLoader;");
    _builder.newLine();
    _builder.append("import android.content.Context;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.Map; // see http call");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(classNamePrefix, "");
    _builder.append("Loader extends AsyncTaskLoader<");
    _builder.append(returnType, "");
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(returnType, "\t");
    _builder.append(" result;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private ");
    _builder.append(classNamePrefix, "\t");
    _builder.append("RequestParameters parameters;");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(classNamePrefix, "\t");
    _builder.append("Loader(Context context) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("super(context);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(classNamePrefix, "\t");
    _builder.append("Loader(Context context, Parcelable parameters) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("this(context);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.parameters = parameters;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Load the data asynchronously");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    _builder.append(returnType, "\t");
    _builder.append(" loadInBackground() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("try");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(classNamePrefix, "\t\t\t");
    _builder.append("HttpRequest httpRequest = new ");
    _builder.append(classNamePrefix, "\t\t\t");
    _builder.append("HttpRequest(parameters);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("httpRequest.do");
    _builder.append(method, "\t\t\t");
    _builder.append("Request();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("return httpRequest.getResult();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* if this invoked http request throws an exception");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("* TODO Let the exception object come through the \'result\' object");
    _builder.newLine();
    _builder.append("\t\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}catch (Exception e)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ");
    _builder.append(returnType, "\t\t\t");
    _builder.append("(e); // general exception catch: this must be passed on to the ui thread");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void deliverResult(");
    _builder.append(returnType, "\t");
    _builder.append(" data) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (isReset()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("// some data came in while the loader is stopped");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.result = data;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.deliverResult(data);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onStartLoading() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (result != null) { // This determines the difference between initLoader and restartLoader ");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("deliverResult(result);");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (takeContentChanged() || result == null) {");
    _builder.newLine();
    _builder.append("\t      ");
    _builder.append("forceLoad();");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onStopLoading() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cancelLoad();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void onReset() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super.onReset();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("cancelLoad();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("result = null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private class ");
    _builder.append(classNamePrefix, "\t");
    _builder.append("HttpRequest");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ");
    _builder.append(classNamePrefix, "\t\t");
    _builder.append("RequestParameters parameters;");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ");
    _builder.append(classNamePrefix, "\t\t");
    _builder.append("HttpRequest(Parcelable parameters) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("this.parameters = parameters;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("disableConnectionReuseIfNecessary();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private ");
    _builder.append(returnType, "\t\t");
    _builder.append(" result = null; ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("public ");
    _builder.append(returnType, "\t\t");
    _builder.append(" getResult() { return result; }");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public do");
    _builder.append(method, "\t\t");
    _builder.append("Request()");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(requestBody, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("* readStream parses a JSON then assigns a Parcelable to this.result");
    _builder.newLine();
    _builder.append("\t\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private void readStream(BufferedInputStream in)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append(jsonParserToParcelable, "\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      String _string = method.toString();
      boolean _startsWith = _string.startsWith("P");
      if (_startsWith) {
        _builder.append("\t\t");
        _builder.append("/**");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(" ");
        _builder.append("* Convert parameters to JSON conforming to the server\'s expection of the call");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(" ");
        _builder.append("*");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append(" ");
        _builder.append("*/");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("private void writeStream(BufferedOutputStream out)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append(serverBoundPayload, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t\t");
    _builder.append("private void disableConnectionReuseIfNecessary() {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("// HTTP connection reuse which was buggy pre-froyo");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("if (Integer.parseInt(Build.VERSION.SDK) < Build.VERSION_CODES.FROYO) {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("System.setProperty(\"http.keepAlive\", \"false\");");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * TODO Check if Https is being used correctly
   */
  public String isTransportLayerSecured(final String url) {
    String _xifexpression = null;
    boolean _startsWith = url.startsWith("https://");
    if (_startsWith) {
      _xifexpression = "HttpsURLConnection";
    } else {
      _xifexpression = "HttpURLConnection";
    }
    return _xifexpression;
  }
  
  public CharSequence setRequestProperty(final CharSequence key, final CharSequence parameterOrLiteral) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("urlConnection.setRequestProperty(\"");
    _builder.append(key, "");
    _builder.append("\", ");
    _builder.append(parameterOrLiteral, "");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateExceptionHandlerLoggingAndThrow(final CharSequence exceptionType) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("}catch(");
    _builder.append(exceptionType, "");
    _builder.append(" e)");
    _builder.newLineIfNotEmpty();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (BuildConfig.DEBUG)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Log.d(\"JSONGEN\", \"...\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("throw e;");
    _builder.newLine();
    return _builder;
  }
  
  /**
   * TODO must escape nasty symbols in the header injection part using URLEncoder#encode/?
   */
  public CharSequence httpRequestBuilder(final CharSequence url, final CharSequence method, final CharSequence requestPropertyKeyValuePairs) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("URL url = new URL(\"");
    _builder.append(url, "");
    _builder.append("\"); // URLEncoder.encode(...) ");
    _builder.newLineIfNotEmpty();
    String _string = url.toString();
    String _isTransportLayerSecured = this.isTransportLayerSecured(_string);
    _builder.append(_isTransportLayerSecured, "");
    _builder.append(" urlConnection = new ");
    String _string_1 = url.toString();
    String _isTransportLayerSecured_1 = this.isTransportLayerSecured(_string_1);
    _builder.append(_isTransportLayerSecured_1, "");
    _builder.append("(url);");
    _builder.newLineIfNotEmpty();
    _builder.append(requestPropertyKeyValuePairs, "");
    _builder.newLineIfNotEmpty();
    _builder.append("urlConnection.setMethod(\"");
    String _string_2 = method.toString();
    String _upperCase = _string_2.toUpperCase();
    _builder.append(_upperCase, "");
    _builder.append("\")");
    _builder.newLineIfNotEmpty();
    _builder.append("urlConnection.setConnectionTimeout(10000); // 10 seconds, default over configuration principle");
    _builder.newLine();
    _builder.append("urlConnection.setReadTimeout(10000); // 10 seconds");
    _builder.newLine();
    _builder.append("urlConnection.setDoInput(true)");
    _builder.newLine();
    {
      String _string_3 = method.toString();
      boolean _startsWith = _string_3.startsWith("P");
      if (_startsWith) {
        _builder.append(" // if POST or PUT");
        _builder.newLineIfNotEmpty();
        _builder.append("urlConnection.setDoOutput(true);");
        _builder.newLine();
      } else {
        _builder.append("urlConnection.setDoOutput(false);");
        _builder.newLine();
      }
    }
    _builder.append("InputStream in = null;");
    _builder.newLine();
    {
      String _string_4 = method.toString();
      boolean _startsWith_1 = _string_4.startsWith("P");
      if (_startsWith_1) {
        _builder.append("OutputStream out = null;");
        _builder.newLine();
      }
    }
    _builder.append("try");
    _builder.newLine();
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("urlConnection.connect();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("if (!url.getHost().equals(urlConnection.getURL().getHost())) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("throw new IllegalStateException(\"You were probably redirected to a sign-on.\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("in = new BufferedInputStream(urlConnection.getInputStream());");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("readStream(in);");
    _builder.newLine();
    {
      String _string_5 = method.toString();
      boolean _startsWith_2 = _string_5.startsWith("P");
      if (_startsWith_2) {
        _builder.append("\t");
        _builder.append("out = new BufferedOutputStream(urlConnection.getOutputStream());");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("writeStream(out);");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("if (BuildConfig.DEBUG)");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, List<String>> responseHeaders = urlConnection.getHeaderFields();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Map.Entry<String, List> entry : map.entrySet())");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("StringBuffer stringList = new StringBuffer();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (String s : entry.getValue())");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("stringList.append(s);\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("Log.e(\"JSONGEN\", String.format(\"key = %s / value = %s\", entry.getKey(), stringList.toString()));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    CharSequence _generateExceptionHandlerLoggingAndThrow = this.generateExceptionHandlerLoggingAndThrow("IOException");
    _builder.append(_generateExceptionHandlerLoggingAndThrow, "");
    _builder.newLineIfNotEmpty();
    CharSequence _generateExceptionHandlerLoggingAndThrow_1 = this.generateExceptionHandlerLoggingAndThrow("UnknownServiceException");
    _builder.append(_generateExceptionHandlerLoggingAndThrow_1, "");
    _builder.newLineIfNotEmpty();
    CharSequence _generateExceptionHandlerLoggingAndThrow_2 = this.generateExceptionHandlerLoggingAndThrow("IllegalAccessError");
    _builder.append(_generateExceptionHandlerLoggingAndThrow_2, "");
    _builder.newLineIfNotEmpty();
    _builder.append("}finally {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("try");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (urlConnection != null)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("urlConnection.disconnect(); // TODO handle this exception separately");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (in != null)");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("{");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("in.close(); // TODO handle this exception separately");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    {
      String _string_6 = method.toString();
      boolean _startsWith_3 = _string_6.startsWith("P");
      if (_startsWith_3) {
        _builder.append("\t\t");
        _builder.append("if (out != null)");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("{");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("out.close(); // TODO handle this exception separately");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    CharSequence _generateExceptionHandlerLoggingAndThrow_3 = this.generateExceptionHandlerLoggingAndThrow("IOException");
    _builder.append(_generateExceptionHandlerLoggingAndThrow_3, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
  }
}
