grammar nl.sison.Xplatform with org.eclipse.xtext.common.Terminals

generate xplatform "http://www.sison.nl/Xplatform"

Xplatform:
	'call' callName=STRING method=RESTFUL_METHODS 'from' ((STRING)?('{' uriPathParams+=STRING '}')*(STRING)?)+
	('with' 'headers' 'from' 'request' requestHeaders=XplatformHeader
		('and' 'response' responseHeaders=XplatformHeader)?
	)?
	(
		'client' 'expects' jsonToClient=XplatformJson
		('server' 'expects' jsonToServer=XplatformJson)?
	)?
;

XplatformJson:
	"'''" 
	type=JsonType | metaType=JsonMetaType
	"'''"
;

// TODO refactor
XplatformHeader:
	"'''" 
	'{' (headerKeyValues+=XplatformHeaderKeyValue)? (',' headerKeyValues+=XplatformHeaderKeyValue (',')?)* '}'
	"'''"
;

XplatformHeaderKeyValue:
	(key=LITERAL_STRING) '=' (value=LITERAL_STRING | value=XPLATFORM_HEADER_PARAMETER)	
;

terminal XPLATFORM_HEADER_PARAMETER:
	'{' STRING '}'
;

terminal RESTFUL_METHODS:
	'PUT' | 'POST' | 'GET' | 'DELETE' // TODO HEAD will be automagically generated as well
;

terminal JSON_LITERAL_NULL: 'null';

terminal JSON_LITERAL_NUMBER:
	('0'..'9')* ('.' ('0'..'9')+)?; // TODO exponent notation
	
terminal JSON_LITERAL_BOOLEAN:
	'true' | 'false'
;

terminal LITERAL_STRING:
	SINGLE_QUOTED_STRING | DOUBLE_QUOTED_STRING
;

terminal SINGLE_QUOTED_STRING:
	 "'"STRING"'"
;

terminal DOUBLE_QUOTED_STRING:
	'"'STRING'"'
;

JsonMetaType:
	'boolean' | 'number' | 'string' | JsonMetaArray
;

JsonType:
	JSON_LITERAL_BOOLEAN | LITERAL_STRING | JSON_LITERAL_NUMBER | JSON_LITERAL_NULL | JsonArray | JsonMetaType | JsonObject 
;

JsonArray:
	'[' (type+=JsonType)? (',' type+=JsonType (',')? )* ']'
;

JsonKeyValuePair:
	key=LITERAL_STRING ':' value=JsonType
;

/**
 * A JsonObject could be an empty object
 */
JsonObject:
	'{' 
		(keyValuePair+=JsonKeyValuePair | metaKeyValuePair+=JsonMetaKeyValuePair)?
			(
				',' (keyValuePair+=JsonKeyValuePair | metaKeyValuePair+=JsonMetaKeyValuePair) (',')?
			)* 
	'}'
;

JsonMetaArray:
	'[' (metaType=JsonMetaType) ']'
;

JsonMetaKeyValuePair:
	metaKey=LITERAL_STRING ':' metaValue=JsonMetaType 
;
